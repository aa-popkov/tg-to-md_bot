import asyncio
import base64
import io
import logging
import sys
from datetime import datetime
from os import getenv

from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, BufferedInputFile, BotCommand
from dotenv import load_dotenv

from middleware import LongTimeMiddleware
from utils import parse_text_to_md, parse_html_to_md

load_dotenv()
TOKEN = getenv("BOT_TOKEN")

dp = Dispatcher()
dp.message.middleware(LongTimeMiddleware())


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"Hello, {html.bold(message.from_user.full_name)}!")


@dp.message(Command(commands=["help"]), flags={"long_operation": True})
async def command_help_handler(message: Message) -> None:
    help_message = await message.answer("""
<b>üìÑ Markdown Converter Bot</b>

<i>–ü—Ä–µ–≤—Ä–∞—â–∞–π Telegram-–ø–æ—Å—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—ã–µ Markdown-—Ñ–∞–π–ª—ã!</i>

‚ú® <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</b> ‚ú®

üîπ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç</b> —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∏–ª—è–º–∏ Telegram (<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code> –∏ –¥—Ä.) –≤ Markdown-—Ä–∞–∑–º–µ—Ç–∫—É.  
üîπ <b>–°–æ—Ö—Ä–∞–Ω—è–µ—Ç</b> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, —Å—Å—ã–ª–∫–∏ –∏ –¥–∞–∂–µ <code>–∫–æ–¥</code>!
üîπ <b>–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏</b> üñºÔ∏è ‚Äì –µ—Å–ª–∏ –≤ –ø–æ—Å—Ç–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–Ω–∏ –≤—Å—Ç—Ä–æ—è—Ç—Å—è –≤ —Ñ–∞–π–ª.
üîπ <b>–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª</b> üìÇ ‚Äì —Å–∫–∞—á–∏–≤–∞–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö!

üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b>
–ü—Ä–æ—Å—Ç–æ <b>–ø–µ—Ä–µ—à–ª–∏</b> –±–æ—Ç—É –ª—é–±–æ–π –ø–æ—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –∏ –ø–æ–ª—É—á–∏ <u>Markdown-–¥–æ–∫—É–º–µ–Ω—Ç</u> –≤ –æ—Ç–≤–µ—Ç!  

üöÄ <i>–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è:</i>
‚Ä¢ üìù –ö–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤  
‚Ä¢ üìö –°–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  

<b>–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
    """)
    parsed_message = parse_html_to_md(help_message.html_text, help_message.entities)
    cur_date = datetime.now().strftime("%Y%m%d_%H%M%S%f")
    text_file = BufferedInputFile(parsed_message.encode(encoding="utf-8"), filename=f"{cur_date}.md")
    await message.answer_document(text_file, caption=f"üëÜ–ü—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown")


@dp.message(F.text, flags={"long_operation": True})
async def parse_message(message: Message) -> None:
    try:
        if not message.entities:
            await message.answer(
                message.text if message.text else "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!")
            return
        parsed_message = parse_html_to_md(message.html_text, message.entities)
        # parsed_message = parse_text_to_md(message.text, message.entities)
        cur_date = datetime.now().strftime("%Y%m%d_%H%M%S%f")
        text_file = BufferedInputFile(parsed_message.encode(encoding="utf-8"), filename=f"{cur_date}.md")
        await message.answer_document(text_file)
    except TypeError:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!")


@dp.message(F.caption & (F.media_group_id == None), flags={"long_operation": True})
async def parse_message_with_caption(message: Message) -> None:
    try:
        if not message.caption_entities:
            await message.answer(
                message.caption if message.caption else "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!")
            return
        parsed_message = parse_html_to_md(message.html_text, message.caption_entities)
        cur_date = datetime.now().strftime("%Y%m%d_%H%M%S%f")
        if message.photo:
            buffer = io.BytesIO()
            await message.bot.download(message.photo[-1].file_id, destination=buffer)
            b64_stream_value = base64.b64encode(buffer.getvalue()).decode("utf-8")
            buffer.close()
            parsed_message += f"\n\n![TG_PHOTO](data:image/jpeg;base64,{b64_stream_value})"
        text_file = BufferedInputFile(parsed_message.encode(encoding="utf-8"), filename=f"{cur_date}.md")
        await message.answer_document(text_file)
    except TypeError:
        await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!")


@dp.message()
async def unknown_handler(message: Message) -> None:
    await message.answer("–¢–∞–∫–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!")


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    commands = [
        BotCommand(command="/start", description="üèÅ –°—Ç–∞—Ä—Ç"),
        BotCommand(command="/help", description="‚ùì –ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands)

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
